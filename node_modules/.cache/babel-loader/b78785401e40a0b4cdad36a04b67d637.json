{"remainingRequest":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/babel-loader/lib/index.js!/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yait-bam/Desktop/learn_vue/quiz/src/components/QuestionBox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/src/components/QuestionBox.vue","mtime":1569000424000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/yait-bam/Desktop/learn_vue/quiz/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nimport { constants } from 'fs';\nexport default {\n  props: {\n    currentQuestion: Object,\n    next: Function,\n    increment: Function\n  },\n  data: function data() {\n    return {\n      selectedIndex: null,\n      correctIndex: null,\n      shuffledAnswers: [],\n      answered: false\n    };\n  },\n  computed: {\n    answers: function answers() {\n      var answers = [].concat(_toConsumableArray(this.currentQuestion.incorrect_answers), [this.currentQuestion.correct_answer]); // answers.push(this.currentQuestion.correct_answer)\n\n      answers = _.shuffle(answers);\n      console.log(this.currentQuestion.correct_answer);\n      this.correctIndex = answers.indexOf(this.currentQuestion.correct_answer);\n      return answers;\n    }\n  },\n  watch: {\n    // currentQuestion(){\n    //     this.selectedIndex = null\n    //     // this.shuffleAnswers()\n    // }\n    currentQuestion: {\n      //We use currentQuestion as an object to save the problem that shuffledAnswers is null in the furst question\n      immediate: true,\n      handler: function handler() {\n        this.selectedIndex = null;\n        this.answered = false;\n      }\n    }\n  },\n  methods: {\n    selectAnswer: function selectAnswer(index) {\n      this.selectedIndex = index;\n    },\n    submitAnswer: function submitAnswer() {\n      var isCorrect = false;\n\n      if (this.selectedIndex === this.correctIndex) {\n        isCorrect = true;\n      }\n\n      this.answered = true;\n      this.increment(isCorrect);\n    },\n    answerClass: function answerClass(index) {\n      var answerClass = '';\n\n      if (!this.answered && this.selectedIndex === index) {\n        answerClass = 'selected';\n      } else if (this.answered && this.correctIndex === index) {\n        answerClass = 'correct';\n      } else if (this.answered && this.selectedIndex === index && this.correctIndex !== index) {\n        answerClass = 'incorrect';\n      }\n\n      return answerClass;\n    }\n  } // mounted(){\n  //     // console.log(this.currentQuestion)\n  //     this.shuffledAnswers()\n  // }\n\n};",{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAA,CAAA,MAAA,QAAA;AACA,SAAA,SAAA,QAAA,IAAA;AACA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,eAAA,EAAA,MADA;AAEA,IAAA,IAAA,EAAA,QAFA;AAGA,IAAA,SAAA,EAAA;AAHA,GADA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,aAAA,EAAA,IADA;AAEA,MAAA,YAAA,EAAA,IAFA;AAGA,MAAA,eAAA,EAAA,EAHA;AAIA,MAAA,QAAA,EAAA;AAJA,KAAA;AAMA,GAbA;AAcA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,UAAA,OAAA,gCAAA,KAAA,eAAA,CAAA,iBAAA,IAAA,KAAA,eAAA,CAAA,cAAA,EAAA,CADA,CAEA;;AAEA,MAAA,OAAA,GAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,eAAA,CAAA,cAAA;AACA,WAAA,YAAA,GAAA,OAAA,CAAA,OAAA,CAAA,KAAA,eAAA,CAAA,cAAA,CAAA;AACA,aAAA,OAAA;AACA;AATA,GAdA;AAyBA,EAAA,KAAA,EAAA;AACA;AACA;AACA;AACA;AACA,IAAA,eAAA,EAAA;AAAA;AACA,MAAA,SAAA,EAAA,IADA;AAEA,MAAA,OAFA,qBAEA;AACA,aAAA,aAAA,GAAA,IAAA;AACA,aAAA,QAAA,GAAA,KAAA;AACA;AALA;AALA,GAzBA;AAsCA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,KADA,EACA;AACA,WAAA,aAAA,GAAA,KAAA;AAEA,KAJA;AAKA,IAAA,YALA,0BAKA;AACA,UAAA,SAAA,GAAA,KAAA;;AAEA,UAAA,KAAA,aAAA,KAAA,KAAA,YAAA,EAAA;AACA,QAAA,SAAA,GAAA,IAAA;AACA;;AACA,WAAA,QAAA,GAAA,IAAA;AAEA,WAAA,SAAA,CAAA,SAAA;AACA,KAdA;AAeA,IAAA,WAfA,uBAeA,KAfA,EAeA;AACA,UAAA,WAAA,GAAA,EAAA;;AAEA,UAAA,CAAA,KAAA,QAAA,IAAA,KAAA,aAAA,KAAA,KAAA,EAAA;AACA,QAAA,WAAA,GAAA,UAAA;AACA,OAFA,MAEA,IAAA,KAAA,QAAA,IAAA,KAAA,YAAA,KAAA,KAAA,EAAA;AACA,QAAA,WAAA,GAAA,SAAA;AACA,OAFA,MAEA,IAAA,KAAA,QAAA,IAAA,KAAA,aAAA,KAAA,KAAA,IAAA,KAAA,YAAA,KAAA,KAAA,EAAA;AACA,QAAA,WAAA,GAAA,WAAA;AACA;;AAEA,aAAA,WAAA;AACA;AA3BA,GAtCA,CAmEA;AACA;AACA;AACA;;AAtEA,CAAA","sourcesContent":["<template>\n    <div class=\"question-box-container\">\n            <b-jumbotron>\n\n                <template v-slot:lead>\n                {{ currentQuestion.question }}\n                </template>\n\n                <hr class=\"my-4\">\n\n              \n                 <b-list-group>\n                    <b-list-group-item \n                    v-for=\"(answer, index) in answers\"\n                    :key=\"index\"\n                     @click=\"selectAnswer(index)\"\n                    :class=\"answerClass(index)\">\n                    {{ answer}}\n                    </b-list-group-item>\n                </b-list-group>\n\n                <b-button variant=\"primary\" @click=\"submitAnswer\" :disabled=\"selectedIndex === null || answered\"> <!--disabled if selectedIndex is null-->\n                    Submit\n                    </b-button>\n                <b-button  @click=\"next\" variant=\"success\" href=\"#\">\n                    Next\n                </b-button>\n            </b-jumbotron>\n    </div>\n</template>\n\n<script>\nimport _ from 'lodash'\nimport { constants } from 'fs';\nexport default {\n    props: {\n        currentQuestion : Object,\n        next: Function,\n        increment: Function\n    },\n    data(){\n        return {\n            selectedIndex: null,\n            correctIndex: null,\n            shuffledAnswers: [],\n            answered: false\n        }\n    },\n    computed: {\n        answers(){\n          let answers =  [...this.currentQuestion.incorrect_answers, this.currentQuestion.correct_answer]\n            // answers.push(this.currentQuestion.correct_answer)\n\n             answers = _.shuffle(answers)\n            console.log(this.currentQuestion.correct_answer)\n            this.correctIndex = answers.indexOf(this.currentQuestion.correct_answer)\n            return answers\n        }\n    },\n    watch: {\n        // currentQuestion(){\n        //     this.selectedIndex = null\n        //     // this.shuffleAnswers()\n        // }\n        currentQuestion: {     //We use currentQuestion as an object to save the problem that shuffledAnswers is null in the furst question\n            immediate: true,\n            handler(){\n                    this.selectedIndex = null\n                    this.answered = false\n            }\n        }\n    },\n    methods: {\n        selectAnswer(index){\n             this.selectedIndex = index\n            \n        },\n        submitAnswer(){\n            let isCorrect = false\n\n            if(this.selectedIndex === this.correctIndex){\n                isCorrect = true\n            }\n            this.answered = true\n\n            this.increment(isCorrect)\n        },\n        answerClass(index){\n            let answerClass = ''\n            \n            if(!this.answered && this.selectedIndex === index){\n                answerClass = 'selected'\n            } else if(this.answered && this.correctIndex === index){\n                   answerClass = 'correct'\n            } else if(this.answered && this.selectedIndex === index && this.correctIndex !== index){\n                 answerClass = 'incorrect'\n            }\n\n            return answerClass\n        }\n    },\n    // mounted(){\n    //     // console.log(this.currentQuestion)\n    //     this.shuffledAnswers()\n    // }\n}\n</script>\n\n<style scoped>\n    .list-group{\n        margin-bottom: 15px;\n    }\n    .list-group-item:hover{\n       background: #EEE;\n       cursor: pointer;\n    }\n    .btn{\n        margin: 0 5px;\n    }\n    .selected{\n        background-color: lightblue\n    }\n    .correct{\n        background-color: lightgreen\n    }\n    .incorrect{\n        background-color: red\n    }\n</style>\n\n"],"sourceRoot":"src/components"}]}